POSIXLY_CORRECT=yes

DIRECTORIES=0
FILES=0
DIR=$PWD
NORMAL=0
IGNOR=0
FILE_ERE=null
ERR=0



if [[ $# < 5 ]]; then
#VALID INPUT OF ARGUMENTS -I -N FILE_ELE DIR #############

if [[ ($@ == "-i") || ($@ == "-n") || ($@ == *"/"*) || ($@ == "") ]]; then
  ERR=0
else
  ERR=1
fi

#SEARCHING ENGINE FOR ARGUMENTS -N -I FILE_ERE DIR #######
case $1 in
  -i) ((IGNOR++))
      FILE_ERE=$2
  ;;
  -n) ((NORMAL++))
  ;;
  /*) DIR=$1
  ;;
esac
case $2 in
  -i) ((IGNOR++))
      FILE_ERE=$3
  ;;
  -n) ((NORMAL++))
  ;;
  /*) DIR=$2
  ;;
esac
case $3 in
  -i) ((IGNOR++))
      FILE_ERE=$4
  ;;
  -n) ((NORMAL++))
  ;;
  /*) DIR=$3
  ;;
esac
case $4 in
  -i) ((IGNOR++))
  ;;
  -n) ((NORMAL++))
  ;;
  /*) DIR=$4
  ;;
esac
###################################
#echo "DIR $DIR"
#echo "NORMAL $NORMAL"
#echo "IGNOR $IGNOR"
#echo "FILE_ERE $FILE_ERE"
#echo $@
#echo $#
####################################
#CALC-TIME
####################################
if [[ ($NORMAL -gt 1) || ($IGNOR -gt 1) || ($ERR -eq 1)]]; then
  echo "UNVALID ARGUMENTS"
  ERR=1
else
    if [[ $IGNOR -eq 1 ]]; then
    #IGNOR SEARCHING
    ####################################
      NUM_100C=$(($(find $DIR -type f ! -iname "*$FILE_ERE*" -size -100c 2>/dev/null | wc -l)))
      NUM_1K=$(($(find $DIR -type f ! -iname "*$FILE_ERE*" -size -1000c 2>/dev/null | wc -l) - $NUM_100C ))
      NUM_10K=$(($(find $DIR -type f ! -iname "*$FILE_ERE*" -size -10k 2>/dev/null | wc -l) - $NUM_100C - $NUM_1K ))
      NUM_100K=$(($(find $DIR -type f ! -iname "*$FILE_ERE*" -size -100k 2>/dev/null | wc -l) - $NUM_100C - $NUM_1K - $NUM_10K ))
      NUM_1M=$(($(find $DIR -type f ! -iname "*$FILE_ERE*" -size -1000k 2>/dev/null | wc -l) - $NUM_100C - $NUM_1K - $NUM_10K - $NUM_100K ))
      NUM_10M=$(($(find $DIR -type f ! -iname "*$FILE_ERE*" -size -10M 2>/dev/null | wc -l) - $NUM_100C - $NUM_1K - $NUM_10K - $NUM_100K - $NUM_1M ))
      NUM_100M=$(($(find $DIR -type f ! -iname "*$FILE_ERE*" -size -100M 2>/dev/null | wc -l) - $NUM_100C - $NUM_1K - $NUM_10K - $NUM_100K - $NUM_1M - $NUM_10M ))
      NUM_1000M=$(($(find $DIR -type f ! -iname "*$FILE_ERE*" -size -1000M 2>/dev/null | wc -l) - $NUM_100C - $NUM_1K - $NUM_10K - $NUM_100K - $NUM_1M - $NUM_10M - $NUM_100M ))
      NUM_1G=$(($(find $DIR -type f ! -iname "*$FILE_ERE*" -size +1000M 2>/dev/null | wc -l)))
    else
      #ALL SEARCHING
      NUM_100C=$(find $DIR -type f -size -100c 2>/dev/null | wc -l)
      NUM_1K=$(($(find $DIR -type f -size -1000c 2>/dev/null | wc -l) -$NUM_100C))
      NUM_10K=$(($(find $DIR -type f -size -10k 2>/dev/null | wc -l) -$NUM_100C -$NUM_1K))
      NUM_100K=$(($(find $DIR -type f -size -100k 2>/dev/null | wc -l) -$NUM_100C -$NUM_1K -$NUM_10K))
      NUM_1M=$(($(find $DIR -type f -size -1000k 2>/dev/null | wc -l) -$NUM_100C -$NUM_1K -$NUM_10K -$NUM_100K))
      NUM_10M=$(($(find $DIR -type f -size -10M 2>/dev/null | wc -l) -$NUM_100C -$NUM_1K -$NUM_10K -$NUM_100K -$NUM_1M))
      NUM_100M=$(($(find $DIR -type f -size -100M 2>/dev/null | wc -l) -$NUM_100C -$NUM_1K -$NUM_10K -$NUM_100K -$NUM_1M -$NUM_10M))
      NUM_1000M=$(($(find $DIR -type f -size -1000M 2>/dev/null | wc -l) -$NUM_100C -$NUM_1K -$NUM_10K -$NUM_100K -$NUM_1M -$NUM_10M -$NUM_100M))
      NUM_1G=($(find $DIR -type f -size +1000M 2>/dev/null | wc -l))
    fi
  fi

if [[ $ERR -eq 0 ]]; then
  DIRECTORIES=$(find $DIR -type d \( ! -iname "*$FILE_ERE*" \) 2>/dev/null | wc -l )
  FILES=$(find $DIR -type f ! -iname "*$FILE_ERE*" 2>/dev/null | wc -l )
fi





###########################################################
#                   WRITE OUT ALL
###########################################################
if [[ $ERR -eq 0 ]]; then

  echo "Root Directory: $DIR"
  echo "Directories: $DIRECTORIES"
  echo "All files: $FILES"
  echo "Full size histogram: "



  if [[ $NORMAL -eq 0 ]]; then

### WITHOUT NORMALIZATION##################################

  echo -n "  <100 B  : "
  for (( i = 0; i < $NUM_100C; i++ )); do
    echo -n "#"
  done
  echo ""
  echo -n "  <1 KiB  : "
  for (( i = 0; i < $NUM_1K; i++ )); do
    echo -n "#"
  done
  echo ""
  echo -n "  <10 KiB : "
  for (( i = 0; i < $NUM_10K; i++ )); do
    echo -n "#"
  done
  echo ""
  echo -n "  <100 KiB: "
  for (( i = 0; i < $NUM_100K; i++ )); do
    echo -n "#"
  done
  echo ""
  echo -n "  <1 MiB  : "
  for (( i = 0; i < $NUM_1M; i++ )); do
    echo -n "#"
  done
  echo ""
  echo -n "  <10 MiB : "
  for (( i = 0; i < $NUM_10M; i++ )); do
    echo -n "#"
  done
  echo ""
  echo -n "  <100 MiB: "
  for (( i = 0; i < $NUM_100M; i++ )); do
    echo -n "#"
  done
  echo ""
  echo -n "  <1 GiB  : "
  for (( i = 0; i < $NUM_1000M; i++ )); do
    echo -n "#"
  done
  echo ""
  echo -n "  >=1 GiB : "
  for (( i = 0; i < $NUM_1G; i++ )); do
    echo -n "#"
  done
  echo ""
  echo ""

else
## ##########  WITH NORMALIZATION ############################
if [[ -t 1 ]]; then
  WIDTH=$(tput cols)
else
  WIDTH=79
fi

# WIDTH -12 and -1 from left and onr from right
  WIDTH=$(($WIDTH - 13))

  ARR=($NUM_100C $NUM_1K $NUM_10K $NUM_100K $NUM_1M $NUM_10M $NUM_100M $NUM_1000M $NUM_1G)
  MAX=0
for (( i = 0; i < ${#ARR[@]}; i++ )); do
  if [[ $MAX -lt ${ARR[i]} ]]; then
    MAX=${ARR[i]}
  else
    MAX=$MAX
  fi
done
  FILES=$((($MAX / $WIDTH) + 1))
  NUM_100C=$(($NUM_100C / $FILES))
  NUM_1K=$(($NUM_1K / $FILES))
  NUM_10K=$(($NUM_10K / $FILES))
  NUM_100K=$(($NUM_100K / $FILES))
  NUM_1M=$(($NUM_1M / $FILES))
  NUM_10M=$(($NUM_10M / $FILES))
  NUM_100M=$(($NUM_100M / $FILES))
  NUM_1000M=$(($NUM_1000M / $FILES))
  NUM_1G=$(($NUM_1G / $FILES))

  echo -n "  <100 B  : "
  for (( i = 0; i < $NUM_100C; i++ )); do
    echo -n "#"
  done
  echo ""
  echo -n "  <1 KiB  : "
  for (( i = 0; i < $NUM_1K; i++ )); do
    echo -n "#"
  done
  echo ""
  echo -n "  <10 KiB : "
  for (( i = 0; i < $NUM_10K; i++ )); do
    echo -n "#"
  done
  echo ""
  echo -n "  <100 KiB: "
  for (( i = 0; i < $NUM_100K; i++ )); do
    echo -n "#"
  done
  echo ""
  echo -n "  <1 MiB  : "
  for (( i = 0; i < $NUM_1M; i++ )); do
    echo -n "#"
  done
  echo ""
  echo -n "  <10 MiB : "
  for (( i = 0; i < $NUM_10M; i++ )); do
    echo -n "#"
  done
  echo ""
  echo -n "  <100 MiB: "
  for (( i = 0; i < $NUM_100M; i++ )); do
    echo -n "#"
  done
  echo ""
  echo -n "  <1 GiB  : "
  for (( i = 0; i < $NUM_1000M; i++ )); do
    echo -n "#"
  done
  echo ""
  echo -n "  >=1 GiB : "
  for (( i = 0; i < $NUM_1G; i++ )); do
    echo -n "#"
  done
  echo ""
  echo ""

fi

fi


else
  ERR=1
  echo "UNVALID ARGUMENTS"
fi
